var gwdshare = gwdshare || {
    version: "1.0"
};
(function() {
    var NowStamp = new Date().getTime();
    var DeleyStamp = new Date().getTime();
    var Delay3000 = new Date().getTime();
    var CurrentWindow = window
      , HtmlDocument = document
      , GlobalBoby = HtmlDocument.body
      , DocumentElement = HtmlDocument.documentElement
      , UrlData = {}
      , GlobalUrl = ""
      , GlobalTitle = HtmlDocument.title
      , UserDataGroup = []
      , DisplayIframe = ""
      , shareData = {}
      , pageBlacklist = HtmlDocument.getElementById("gwdshare_js") && HtmlDocument.getElementById("gwdshare_js").getAttribute('data-pbl')
      , userData = HtmlDocument.getElementById("gwdshare_js") && HtmlDocument.getElementById("gwdshare_js").attributes.data
      , isIE6 = /MSIE 6.0/.test(navigator.userAgent)
      , isCSS1 = HtmlDocument.compatMode != "CSS1Compat"
      , userData = userData && userData.nodeValue.replace(/&amp;/g, "&").split("&") || "";
    try {
        var location = CurrentWindow.location || HtmlDocument.location;
        UrlData.href = location.href;
        UrlData.search = location.search;
        UrlData.hash = location.hash;
        UrlData.protocol = location.protocol;
        UrlData.hostname = location.hostname;
        UrlData.pathname = location.pathname;
        GlobalUrl = encodeURIComponent(UrlData.href)
    } catch (f) {
        setTimeout(function() {
            var B = CurrentWindow.location || HtmlDocument.location;
            UrlData.href = B.href;
            UrlData.search = B.search;
            UrlData.hash = B.hash;
            UrlData.protocol = B.protocol;
            UrlData.hostname = B.hostname;
            UrlData.pathname = B.pathname;
            GlobalUrl = encodeURIComponent(UrlData.href)
        }, 0)
    }
    ;for (var length = userData.length; length--; ) {
        var currentString = userData[length].split("=");
        UserDataGroup[currentString[0]] = currentString[1]
    }
    ;var GWDShareProperty = {
        gwdPref: "gwds_",
        gwdNums: 8,
        gwdMini: UserDataGroup.mini || false,
        gwdType: UserDataGroup.type || "",
        gwdLeft: UserDataGroup.pos || "right",
        gwdTitle: "分享到",
        gwdText: GlobalTitle,
        weiboText: "",
        gwdMore: "更多...",
        gwdPopTitle: "分享到",
        gwdImg: UserDataGroup.img || 0,
        gwdImgW: 24,
        gwdTop: 0,
        gwdIds: "gwdshare",
        gwdIdsl: UserDataGroup.mini ? "gwdshare_m" : "gwdshare_l",
        gwdUid: UserDataGroup.uid || "",
        gwdjsfloder: UserDataGroup.jsf || "",
        gwdPic: "",
        searchPic: UserDataGroup.searchPic || 0,
        gwdComment: "",
        gwdDesc: "",
        wbUid: "",
        tongji: "on",
        review: "on",
        render: true,
        snsKey: {},
        gwdHost: "http://share.gwd.gov.cn/",
        gwdJump: "http://share.gwd.gov.cn/",
        gwdApi: "http://share.gwd.gov.cn/api/",
        gwdStatistics: "http://share.gwd.gov.cn/commit",
        gwdCommit: "http://share.gwd.gov.cn/common/Share",
        gwdMshare: "http://share.gwd.gov.cn/mshare",
        gwdCout: "http://share.gwd.gov.cn/v.gif",
        gwdWList: "([http|https]://[a-zA-Z0-9_.]+.gwd.gov.cn)",
        gwdList: ["tsina,新浪微博,xlwb", "weixin,微信,weixin", "qzone,QQ空间,qqkj",   "douban,豆瓣网,db"]
    } || {}
      , UnityFunction = {
        _parseJson: function(targetString) {
            if (typeof targetString != "string") {
                return targetString
            }
            ;targetString = targetString.replace(/^\s*{|}\s*$/g, "");
            var stringGroup = targetString.split(",");
            var jsonResult = {};

            function GetJsonValue(targetObject) {
                if (targetObject.indexOf("{") == 0) {
                    return UnityFunction._parseJson(targetObject)
                } else {
                    var group = targetObject.split(".");
                    var windowContent = window;
                    for (var index = 0, count = group.length; index < count; index++) {
                        var theObject = group[index];
                        if (typeof windowContent == "object" && theObject in windowContent) {
                            windowContent = windowContent[theObject]
                        } else {
                            return targetObject
                        }
                    }
                    ;return windowContent
                }
            }
            ;for (var index = 0, length = stringGroup.length; index < length; index++) {
                var currentString = stringGroup[index];
                var splitIndex = currentString.indexOf(":");
                if (splitIndex) {
                    var jsonKey = currentString.substring(0, splitIndex).replace(/^\s*[\'\"]?|[\"\']?\s*$/g, "");
                    var jsonValue = currentString.substring(splitIndex + 1).replace(/^\s*/g, "");
                    var firstChar = jsonValue.charAt(0);
                    if (firstChar == "'" || firstChar == '"') {
                        do {
                            var lastChar = jsonValue.replace(/\s*$/g, "");
                            if (lastChar.substring(lastChar.length - 1) == firstChar) {
                                break
                            } else {
                                jsonValue = jsonValue + "," + stringGroup[++index]
                            }
                        } while (index < stringGroup.length - 1);jsonValue = jsonValue.replace(/^\s*[\'\"]?|[\"\']?\s*$/g, "")
                    } else {
                        if (firstChar == "{") {
                            do {
                                var lastChar = jsonValue.replace(/\s*$/g, "");
                                if (lastChar.substring(lastChar.length - 1) == "}") {
                                    break
                                } else {
                                    jsonValue = jsonValue + "," + stringGroup[++index]
                                }
                            } while (index < stringGroup.length - 1);jsonValue = GetJsonValue(jsonValue)
                        } else {
                            if (!/^[0-9]*$/.test(jsonValue)) {
                                jsonValue = GetJsonValue(jsonValue)
                            } else {
                                jsonValue = jsonValue.replace(/^\s*[\'\"]?|[\"\']?\s*$/g, "")
                            }
                        }
                    }
                    ;jsonResult[jsonKey] = jsonValue
                }
            }
            ;return jsonResult
        },
        _createScriptTag: function(scriptObject, scriptHref, encoding) {
            scriptObject.setAttribute("type", "text/javascript");
            encoding && scriptObject.setAttribute("charset", encoding);
            scriptObject.setAttribute("src", scriptHref);
            document.getElementsByTagName("head")[0].appendChild(scriptObject)
        },
        _removeScriptTag: function(scriptObject) {
            if (scriptObject.clearAttributes) {
                scriptObject.clearAttributes()
            } else {
                for (var propertyName in scriptObject) {
                    if (scriptObject.hasOwnProperty(propertyName) && "parentNode" != propertyName) {
                        delete scriptObject[propertyName]
                    }
                }
            }
            ;if (scriptObject && scriptObject.parentNode) {
                scriptObject.parentNode.removeChild(scriptObject)
            }
            ;scriptObject = null
        },
        lower: function(str) {
            return (str && str.toLowerCase) ? str.toLowerCase() : str
        },
        isPageMatch: function(target, page) {
            if (!target || target == "")
                return false;
            page = UnityFunction.lower(page || UrlData.pathname);
            var isArray = !!(target && target.constructor == Array);
            if (!isArray) {
                target = target.split(",")
            }
            ;for (var i = 0, len = target.length; i < len; i++) {
                var t = UnityFunction.lower(target[i]);
                if (t == "" || t.length == 0)
                    continue;
                if (page == t || (page.indexOf(t) > -1) || (t.test && t.test(page))) {
                    return true
                }
            }
            ;return false
        },
        callByBrowser: function(scriptHref, loadfunc, data) {
            var scriptObject = document.createElement("SCRIPT"), intState = 0, propertyData = data || {}, encoding = propertyData.charset, functionForLoad = loadfunc || function() {}
            , timeoutvalue = propertyData.timeOut || 0, timeoutObject;
            scriptObject.onload = scriptObject.onreadystatechange = function() {
                if (intState) {
                    return
                }
                ;var scriptState = scriptObject.readyState;
                if ("undefined" == typeof scriptState || scriptState == "loaded" || scriptState == "complete") {
                    intState = 1;
                    try {
                        functionForLoad();
                        clearTimeout(timeoutObject)
                    } finally {
                        scriptObject.onload = scriptObject.onreadystatechange = null;
                        UnityFunction._removeScriptTag(scriptObject)
                    }
                }
            }
            ;
            if (timeoutvalue) {
                timeoutObject = setTimeout(function() {
                    scriptObject.onload = scriptObject.onreadystatechange = null;
                    UnityFunction._removeScriptTag(scriptObject);
                    propertyData.onfailure && propertyData.onfailure()
                }, timeoutvalue)
            }
            ;UnityFunction._createScriptTag(scriptObject, scriptHref, encoding)
        },
        on: function(targetObject, eventName, runFunction) {
            if (targetObject.addEventListener) {
                targetObject.addEventListener(eventName, runFunction, false)
            } else {
                if (targetObject.attachEvent) {
                    targetObject.attachEvent("on" + eventName, runFunction)
                }
            }
        },
        unon: function(argetObject, eventName, runFunction) {
            if (argetObject.removeEventListener) {
                argetObject.removeEventListener(eventName, runFunction, false)
            } else {
                if (argetObject.detachEvent) {
                    argetObject.detachEvent("on" + eventName, runFunction)
                }
            }
        },
        html: function(propertyGroup, createElement) {
            if (createElement == null || createElement == undefined || createElement == "")
                createElement = "div";
            var newElement = HtmlDocument.createElement(createElement);
            for (var property in propertyGroup) {
                property == "style" ? newElement[property].cssText = propertyGroup[property] : newElement[property] = propertyGroup[property]
            }
            ;if (createElement == "link") {
                HtmlDocument.getElementsByTagName("head")[0].appendChild(newElement)
            } else {
                return GlobalBoby.insertBefore(newElement, GlobalBoby.firstChild);
            }
        },
        list: function(sharePlatform) {
            var prefString = GWDShareProperty.gwdPref
              , strGroup = sharePlatform.split(",")
              , nameString = strGroup[1]
              , urlTo = "#"
              , displayString = prefString + strGroup[0] + " " + strGroup[2];
            return {
                name: nameString,
                url: urlTo,
                cls: displayString
            }
        },
        list_s: function(ifAddToDocument) {
            var sharePlatformCollection = []
              , sharePlatform = inner = ""
              , currentshare = GWDShareProperty
              , gwdList = currentshare.gwdList
              , gwdNums = gwdList.length
              , htmlForMore = "";
            var gwdsElement = HtmlDocument.getElementById("gwdshare")
              , gwdsChildrenLinks = UnityFunction.children(gwdsElement)
              , moreShareLinkClassName = /gwds_tools_24/.test(gwdsElement.className) ? "MoreShareLink_24" : (/gwds_tools_32/.test(gwdsElement.className) ? "MoreShareLink_32" : "MoreShareLink");
            while (gwdNums--) {
                sharePlatform = UnityFunction.list(gwdList[gwdNums]);
                var isRequeir = true;
                for (i = 0; i < gwdsChildrenLinks.length; i++) {
                    var linkclass = gwdsChildrenLinks[i].className;
                    if (linkclass && linkclass == sharePlatform.cls.substr(0, linkclass.length)) {
                        isRequeir = false;
                        break
                    }
                }
                ;if (isRequeir)
                    sharePlatformCollection.push('<a href="' + sharePlatform.url + '" class="' + sharePlatform.cls + ' ' + moreShareLinkClassName + '">' + sharePlatform.name + "</a>")
            }
            ;inner += '<div id="' + currentshare.gwdIdsl + '"><div id="' + currentshare.gwdIdsl + '_c"><h6>' + currentshare.gwdTitle + "<b>&nbsp;</b></h6>";
            inner += "<ul><li>" + sharePlatformCollection.reverse().join("</li><li>") + "</li>" + htmlForMore + '</ul><p><a href="http://share.gwd.gov.cn/" class="goWebsite">分享</a></p></div></div>';
            if (ifAddToDocument) {
                var newElement = UnityFunction.html({
                    id: "gwdshare_s",
                    innerHTML: inner,
                    style: "display:none"
                });
                shareAction.bind(newElement, "click", "b", function() {
                    newElement.style.display = "none"
                });
                newElement.style.display = "block";
                var children = UnityFunction.children(newElement);
                newElement = children[children.length - 1];
                UnityFunction.on(newElement, "mouseover", function(eventName) {
                    var theEvent = eventName || window.event;
                    var targetElement = theEvent.target || theEvent.srcElement;
                    var position = UnityFunction.getPosition(targetElement);
                    var relatedTarget = theEvent.relatedTarget || theEvent.fromElement;
                    var mousePosition = UnityFunction.getMousePos(theEvent);
                    var horizontal = mousePosition.x - position.l;
                    var vertical = mousePosition.y - position.t;
                    targetElement.buttontype = 1;
                    targetElement.x = horizontal;
                    targetElement.y = vertical;
                    if (UnityFunction.contains(newElement, relatedTarget)) {
                        return
                    }
                    ;newElement.time = +new Date
                })
            } else {
                return inner
            }
        },
        scroll: function(popWindow, position) {
            UnityFunction.on(CurrentWindow, "scroll", function() {
                var size = UnityFunction.getSize()
                  , currentShare = GWDShareProperty
                  , gwdTop = currentShare.gwdTop;
                if (currentShare.gwdType == "slide") {
                    if (isIE6 || isCSS1) {
                        UnityFunction.setAttr(HtmlDocument.getElementById(currentShare.gwdIdsl), "display:block");
                        _gwds.style.top = (size.t + (gwdTop == 0 ? (size.h / 2 - (HtmlDocument.getElementById(currentShare.gwdIdsl).offsetHeight - 11) / 2) : parseInt(gwdTop))) + "px"
                    } else {
                        if (currentShare.gwdTop != 0) {
                            _gwds.style.top = parseInt(currentShare.gwdTop) + "px"
                        }
                    }
                }
                ;if (position == "pop" && (isIE6 || isCSS1)) {
                    popWindow.style.top = (size.t + size.h / 2 - popWindow.offsetHeight / 2) + "px";
                }
            })
        },
        getSize: function() {
            return {
                t: (GlobalBoby.scrollTop || DocumentElement.scrollTop),
                l: (GlobalBoby.scrollLeft || DocumentElement.scrollLeft),
                w: (DocumentElement.clientWidth || GlobalBoby.clientWidth),
                h: (CurrentWindow.innerHeight || DocumentElement.clientHeight || GlobalBoby.clientHeight)
            }
        },
        getPosition: function(element) {
            var size = UnityFunction.getSize()
              , targetElement = element
              , origin = {
                t: 0,
                l: 0
            }
              , isGecko = /gecko/.test(navigator.userAgent)
              , originOffset = function(top, left) {
                origin.t += top,
                origin.l += left
            };
            if (targetElement && targetElement != GlobalBoby) {
                if (targetElement.getBoundingClientRect) {
                    var clientRect = targetElement.getBoundingClientRect()
                      , ownerDocument = element.ownerDocument
                      , ownerBody = ownerDocument.body
                      , ownerElement = ownerDocument.documentElement
                      , clientTop = ownerElement.clientTop || ownerBody.clientTop || 0
                      , clientLeft = ownerElement.clientLeft || ownerBody.clientLeft || 0;
                    if (clientRect.top == clientRect.bottom) {
                        var U = targetElement.style.display;
                        targetElement.style.display = "block";
                        targetElement.style.display = U
                    }
                    ;originOffset(clientRect.top + size.t - clientTop, clientRect.left + size.l - clientLeft)
                } else {
                    var l = HtmlDocument.defaultView;
                    while (targetElement) {
                        originOffset(targetElement.offsetTop, targetElement.offsetLeft);
                        var j = l.getComputedStyle(targetElement, null);
                        if (isGecko) {
                            var i = parseInt(j.getPropertyValue("border-left-width"), 10) || 0
                              , t = parseInt(j.getPropertyValue("border-top-width"), 10) || 0;
                            originOffset(t, i);
                            if (targetElement != element && j.getPropertyValue("overflow") != "visible") {
                                originOffset(t, i)
                            }
                        }
                        ;targetElement = targetElement.offsetParent
                    }
                    ;targetElement = element.parentNode;
                    while (targetElement && targetElement != GlobalBoby) {
                        originOffset(-targetElement.scrollTop, -targetElement.scrollLeft);
                        targetElement = targetElement.parentNode
                    }
                }
            }
            ;return origin
        },
        setAttr: function(element, styles) {
            var styleCollection = styles.split(";")
              , stylelength = styleCollection.length;
            while (stylelength--) {
                if (styleCollection[stylelength]) {
                    var keyAndValue = styleCollection[stylelength].split(":");
                    if (keyAndValue && element) {
                        element.style[keyAndValue[0]] = keyAndValue[1]
                    }
                }
            }
        },
        children: function(element) {
            for (var childrenCollection = [], currentChild = element.firstChild; currentChild; currentChild = currentChild.nextSibling) {
                if (currentChild.nodeType == 1) {
                    childrenCollection.push(currentChild)
                }
            }
            ;return childrenCollection
        },
        generateRandom: function(stringSource, charNumber) {
            var argLength = stringSource.length;
            var targetStr = "";
            for (var index = 1; index <= charNumber; index++) {
                var random = Math.floor(argLength * Math.random());
                targetStr = targetStr + stringSource.charAt(random)
            }
            ;return targetStr
        },
        generateLinkid: function() {
            var dateStr = (+new Date).toString(36);
            var randomStr = UnityFunction.generateRandom("0123456789abcdefghijklmnopqrstuvwxyz", 3);
            return dateStr + randomStr
        },
        contains: function(parentElement, childElement) {
            if (!childElement || !parentElement) {
                return false
            }
            ;if (parentElement == childElement) {
                return true
            }
            ;var parentNode = childElement.parentNode;
            while (parentNode != null && typeof (parentNode.tagName) != "undefind") {
                if (parentNode == parentElement) {
                    return true
                }
                ;parentNode = parentNode.parentNode
            }
            ;return false
        },
        getMousePos: function(focusElement) {
            if (focusElement.pageX || focusElement.pageY) {
                return {
                    x: focusElement.pageX,
                    y: focusElement.pageY
                }
            }
            ;if (document.documentElement && document.documentElement.scrollTop) {
                return {
                    x: focusElement.clientX + document.documentElement.scrollLeft - document.documentElement.clientLeft,
                    y: focusElement.clientY + document.documentElement.scrollTop - document.documentElement.clientTop
                }
            } else {
                if (document.body) {
                    return {
                        x: focusElement.clientX + document.body.scrollLeft - document.body.clientLeft,
                        y: focusElement.clientY + document.body.scrollTop - document.body.clientTop
                    }
                }
            }
        },
        _isCookieValidKey: function(stringKey) {
            return (new RegExp('^[^\-\ \\\(\\)<>@,;:\\\\\\"\\[\\]\\?=\\{\\}\\/\-\￿]+$')).test(stringKey)
        },
        getCookieRaw: function(cookieKey) {
            if (UnityFunction._isCookieValidKey(cookieKey)) {
                var regex = new RegExp("(^| )" + cookieKey + "=([^;]*)(;|$)")
                  , iscookie = regex.exec(document.cookie);
                if (iscookie) {
                    return iscookie[2] || null
                }
            }
            ;return null
        },
        setCookieRaw: function(cookieKey, cookieValue, data) {
            if (!UnityFunction._isCookieValidKey(cookieKey)) {
                return
            }
            ;data = data || {};
            var expiresData = data.expires;
            if ("number" == typeof data.expires) {
                expiresData = new Date();
                expiresData.setTime(expiresData.getTime() + data.expires)
            }
            ;document.cookie = cookieKey + "=" + cookieValue + (data.path ? "; path=" + data.path : "") + (expiresData ? "; expires=" + expiresData.toGMTString() : "") + (data.domain ? "; domain=" + data.domain : "") + (data.secure ? "; secure" : "")
        },
        getCookie: function(cookieKey) {
            var cookieRow = UnityFunction.getCookieRaw(cookieKey);
            if ("string" == typeof cookieRow) {
                cookieRow = decodeURIComponent(cookieRow);
                return cookieRow
            }
            ;return null
        },
        setCookie: function(cookieKey, cookieValue, data) {
            UnityFunction.setCookieRaw(cookieKey, encodeURIComponent(cookieValue), data)
        },
        log: (function() {
            var shareImgs = [];
            return function(imgSrc) {
                var strKey = "gwdsharelog__" + (new Date()).getTime()
                  , result = shareImgs[strKey] = new Image();
                result.onload = (result.onerror = function() {
                    shareImgs[strKey] = null
                }
                );
                result.src = imgSrc;
                result = null
            }
        }
        )()
    }
      , AddCSSAndIframeElement = function() {
        var hasCssLink = gwdshare.addCssAlready || false;
        var href = "http://static.gridsumdissector.com/zheng_fen_xiang/content/gwdsharestyle.css";
        if (hasCssLink == false) {
            var link = document.createElement("link");
            gwdshare.velocity = gwdshare.velocity || {};
            gwdshare.velocity.cssLoadStart = +new Date();
            link.onload = function() {
                gwdshare.velocity.cssLoadEnd = +new Date()
            }
            ;
            link.href = href;
            link.rel = "stylesheet";
            link.type = "text/css";
            document.getElementsByTagName("head")[0].appendChild(link);
            gwdshare.addCssAlready = true
        }
        ;
        function async_load() {
            if (window.GridsumWebDissector)
                gwdshare.addjsAlready = true;
            if (GWDShareProperty.gwdjsfloder != "") {
                var hasJsLink = gwdshare.addjsAlready || false;
                var jsSrc = "http://static.gridsumdissector.com/js/Clients/" + GWDShareProperty.gwdjsfloder + "/gs.js";
                if (hasJsLink == false) {
                    var E = document.createElement("SCRIPT");
                    UnityFunction._createScriptTag(E, jsSrc);
                    gwdshare.addjsAlready = true
                }
            }
            ;if (GWDShareProperty.gwdUid == 'GWD-801026') {
                var hasUserJsLink = gwdshare.addjsAlready || false;
                var jsUserSrc = "http://static.gridsumdissector.com/js/Clients/GWD-801026-069B76/gs.js";
                if (hasUserJsLink == false) {
                    var eScr = document.createElement("SCRIPT");
                    UnityFunction._createScriptTag(eScr, jsUserSrc);
                    gwdshare.addjsAlready = true
                }
            }
        }
        ;if (window.attachEvent)
            window.attachEvent('onload', async_load);
        else
            window.addEventListener('load', async_load, false)
    }
      , AddHideDiv = function(codeStr) {
        var regex = /(#\d+\-[a-zA-Z\d]+\-\d+\-\d+\-[a-f\d]{32}$)/g
          , url = (UrlData.search + UrlData.hash).replace(/&/g, "#")
          , regexUrl = url.match(regex) || ""
          , gwdlist = new RegExp(GWDShareProperty.gwdWList,"ig")
          , hrefFull = UrlData.protocol + "//" + UrlData.hostname + UrlData.pathname + UrlData.search;
        if (gwdlist.test(UrlData.href) && regexUrl == "" && typeof codeStr == "undefined") {
            return
        }
        ;var elementTypes = [];
        if (gwdshare.publicFunction._bClassElementArray.length > 0) {
            elementTypes.push("button")
        }
        ;if (gwdshare.publicFunction._tClassElementArray.length > 0) {
            elementTypes.push("tools")
        }
        ;if (gwdshare.publicFunction.conf.gwdType) {
            elementTypes.push(gwdshare.publicFunction.conf.gwdType)
        }
        ;var addshareplatform = (function() {
            for (var index = 0, typesLength = elementTypes.length, elementTypehash = {}, elementTypeCollection = []; index < typesLength; index++) {
                !(elementTypes[index]in elementTypehash) && elementTypeCollection.push(elementTypes[index]) && (elementTypehash[elementTypes[index]] = "")
            }
            ;return elementTypeCollection.join(",")
        }
        )();
        if (GWDShareProperty.tongji == "on" || regexUrl != "" || typeof codeStr != "undefined") {
            if (regexUrl != "" && codeStr != "3072") {
                regexUrl = regexUrl.toString().replace("#", "");
                (new Image()).src = GWDShareProperty.gwdCommit + "back?url=" + encodeURIComponent(hrefFull) + "&sign=" + encodeURIComponent(regexUrl) + "&title=" + encodeURIComponent(GlobalTitle.substr(0, 300))
            }
            ;gwdshare.velocity = gwdshare.velocity || {};
            gwdshare.velocity.mainJsLoaded = +new Date();
            if (typeof codeStr != "undefined") {
                (new Image()).src = GWDShareProperty.gwdCout + "&type=" + codeStr + "&sign=" + regexUrl + "&uid=" + GWDShareProperty.gwdUid + "&desturl=" + encodeURIComponent(HtmlDocument.referrer) + "&linkid=" + LinkId + "&button=" + addshareplatform
            } else {
                var shareobject = [0, 0, 0, 0];
                for (var index = 0, typeslength = elementTypes.length; index < typeslength; index++) {
                    shareobject[{
                        tools: 0,
                        button: 1,
                        slide: 2
                    }[elementTypes[index]]] = 1
                }
                ;gwdshare._LogPool = gwdshare._LogPool || [];
                gwdshare._LogPool.push({
                    key: "cite",
                    api: {
                        uid: GWDShareProperty.gwdUid || "",
                        linkid: LinkId,
                        type: parseInt(shareobject.reverse().join(""), 2),
                        mini: GWDShareProperty.gwdMini ? 1 : 0
                    }
                })
            }
        }
    }
      , popShareWindow = {
        create: function() {
            var currentShare = GWDShareProperty
              , gwdList = currentShare.gwdList
              , sharePlatformCount = gwdList.length
              , sharePlatformCollection = []
              , sharePlatform = ""
              , size = UnityFunction.getSize()
              , popElement = HtmlDocument.getElementById(currentShare.gwdIds + "_pop")
              , positionCSS = ((isIE6 || isCSS1) ? "absolute" : "fixed")
              , top = ((isIE6 || isCSS1) ? size.t : 0);
            if (!popElement) {
                while (sharePlatformCount--) {
                    sharePlatform = UnityFunction.list(gwdList[sharePlatformCount]),
                    sharePlatformCollection.push('<a href="' + sharePlatform.url + '" class="' + sharePlatform.cls + '">' + sharePlatform.name + "</a>")
                }
                ;var popShareWindowElement = UnityFunction.html({
                    id: currentShare.gwdIds + "_pop",
                    style: "position:" + positionCSS,
                    innerHTML: "<div><h5></h5><ul><li>" + sharePlatformCollection.reverse().join("</li><li>") + '</li></ul><p><a href="#" class="goWebsite">更多分享</a></p></div>'
                });
                shareAction.bind(popShareWindowElement, "mouseover", "a");
                shareAction.bind(popShareWindowElement, "click", "b", function() {
                    popShareWindowElement.style.display = "none";
                });
                UnityFunction.on(popShareWindowElement, "mouseover", function(event) {
                    var theEvent = event || window.event;
                    var target = theEvent.target || theEvent.srcElement;
                    var position = UnityFunction.getPosition(target);
                    var mousePosition = UnityFunction.getMousePos(theEvent);
                    var horizontal = mousePosition.x - position.l;
                    var vertical = mousePosition.y - position.t;
                    target.buttontype = 2;
                    target.x = horizontal;
                    target.y = vertical;
                    var targetElement = theEvent.relatedTarget || theEvent.fromElement;
                    if (UnityFunction.contains(popShareWindowElement, targetElement)) {
                        return
                    }
                    ;popShareWindowElement.time = +new Date
                })
            }
            ;var poindowDocument = popShareWindowElement || popElement;
            poindowDocument.getElementsByTagName("h5")[0].innerHTML = (shareData.title || currentShare.gwdPopTitle) + "<b>&nbsp;</b>";
            UnityFunction.setAttr(poindowDocument, "display:block;");
            UnityFunction.setAttr(poindowDocument, "left:" + (size.w / 2 - poindowDocument.offsetWidth / 2) + "px;top:" + (top + size.h / 2 - poindowDocument.offsetHeight / 2) + "px");
            UnityFunction.scroll(poindowDocument, "pop");
            UnityFunction.on(CurrentWindow, "resize", function() {
                var windowSize = UnityFunction.getSize()
                  , cssProperty = "left:" + (windowSize.w / 2 - poindowDocument.offsetWidth / 2) + "px;top:" + (top + windowSize.h / 2 - poindowDocument.offsetHeight / 2) + "px";
                UnityFunction.setAttr(poindowDocument, cssProperty);
            });
            if (currentShare.gwdType != "slide") {
                HtmlDocument.getElementById(GWDShareProperty.gwdIdsl).style.display = "none";
                HtmlDocument.getElementById("gwdsIfr").style.display = "none"
            }
            ;window.gwdshareActivity && gwdshareActivity.check()
        }
    }
      , shareAction = {
        bind: function(element, eventName, elementType, executeFunction) {
            var thiselement = this;
            if (!element)
                return;
            element.addEventListener ? element.addEventListener(eventName, function(event) {
                return thiselement._action(event, event.target, elementType, element, executeFunction)
            }, false) : element.attachEvent("on" + eventName, function(event) {
                event = CurrentWindow.event;
                return thiselement._action(event, event.srcElement, elementType, element, executeFunction)
            })
        },
        _action: function(currentEvent, targetElement, elementType, element, excuteFunction) {
            if (targetElement.nodeName == elementType.toUpperCase()) {
                if (elementType == "a" || elementType == "span") {
                    var cssName = targetElement.className
                      , className = cssName == "goWebsite" ? cssName : cssName.split(" ")[0].split("_")[1]
                      , thiswindow = this;
                    if (className) {
                        (className == "more" && elementType == "span") ? thiswindow._tools() : targetElement.onclick = function(platformNameInClassName, thiselement) {
                            return function(event) {
                                var theEvent = event || window.event;
                                var target = theEvent.target || theEvent.srcElement;
                                var position = UnityFunction.getPosition(target);
                                var mousePosition = UnityFunction.getMousePos(theEvent);
                                var horizontal = mousePosition.x - position.l;
                                var vertical = mousePosition.y - position.t;
                                if (platformNameInClassName == "more") {
                                    thiswindow._tools()
                                } else {
                                    if (platformNameInClassName == "copy") {
                                        thiswindow._copy(thiswindow)
                                    } else {
                                        if (platformNameInClassName == "print") {
                                            thiswindow._print()
                                        } else {
                                            thiswindow._jump(platformNameInClassName, thiselement, targetElement, horizontal, vertical)
                                        }
                                    }
                                }
                                ;return false
                            }
                        }(className, element)
                    }
                    ;return false
                }
                ;if (typeof excuteFunction === "function") {
                    excuteFunction()
                }
            }
            ;if (typeof currentEvent.preventDefault === "function") {
                currentEvent.preventDefault();
                currentEvent.stopPropagation()
            } else {
                currentEvent.returnValue = false;
                currentEvent.cancelBubble = true
            }
        },
        _tools: function() {
            AddHideDiv(3072);
            popShareWindow.create()
        },
        _copy: function(windowObject) {
            _this = windowObject;
            var browserObject = new _this._browsers();
            if (browserObject.name == "IE") {
                window.clipboardData.setData("text", document.title + " " + UrlData.href);
                alert("标题和链接复制成功，您可以推荐给QQ/MSN上的好友了！");
            } else {
                window.prompt("您使用的是非IE核心浏览器，请按下 Ctrl+C 复制代码到剪贴板", document.title + " " + UrlData.href)
            }
        },
        _mail: function(B) {},
        _print: function() {
            var popWindow = document.getElementById("gwdshare_pop");
            popWindow && (popWindow.style.display = "none");
            window.print();
            popWindow && (popWindow.style.display = "block");
            return
        },
        _jump: function(platformNameInClassName, shareElement, targerElement, horizontal, vertical) {
            var currentShare = GWDShareProperty
              , gwdPic = currentShare.gwdPic
              , gwdText = currentShare.gwdText
              , weiboText = currentShare.weiboText
              , wbUid = currentShare.wbUid
              , globalUrl = GlobalUrl
              , gwdDesc = currentShare.gwdDesc
              , gwdComment = currentShare.gwdComment
              , miniWindow = currentShare.gwdMiniWindow || 0;
            shareData = (shareElement.getAttribute("data") && shareElement.getAttribute("data") != "") ? UnityFunction._parseJson(shareElement.getAttribute("data")) : shareData;
            if (shareData != "") {
                gwdPic = encodeURIComponent(shareData.pic || "") || gwdPic;
                globalUrl = encodeURIComponent(shareData.url || "") || globalUrl;
                gwdComment = encodeURIComponent(shareData.comment || "") || gwdComment;
                gwdDesc = encodeURIComponent(shareData.desc || "") || gwdDesc;
                wbUid = shareData.wbuid || wbUid;
                if (platformNameInClassName == "tsina") {
                    if (shareData.text && shareData.weibotext) {
                        gwdText = encodeURIComponent((shareData.text + shareData.weibotext).substr(0, 300))
                    } else {
                        if (shareData.weibotext) {
                            gwdText = encodeURIComponent((gwdText + shareData.weibotext).substr(0, 300))
                        } else {
                            if (shareData.text) {
                                gwdText = encodeURIComponent((shareData.text + weiboText).substr(0, 300))
                            } else {
                                gwdText = encodeURIComponent((gwdText + weiboText).substr(0, 300))
                            }
                        }
                    }
                } else {
                    gwdText = encodeURIComponent((shareData.text || "").substr(0, 300)) || encodeURIComponent(gwdText.substr(0, 300))
                }
            } else {
                if (platformNameInClassName == "tsina") {
                    gwdText = encodeURIComponent((gwdText + weiboText).substr(0, 300))
                } else {
                    gwdText = encodeURIComponent(gwdText.substr(0, 300))
                }
            }
            ;gwdText = encodeURIComponent(gwdText);
            Delay3000 = new Date().getTime() + 3000;
            var snString = NowStamp.toString(32) + DeleyStamp.toString(32) + Delay3000.toString(32);
            var buttontype = targerElement.buttontype;
            var loadedXInt = Math.floor(gwdshare.XY.loadedX);
            var loadedYInt = Math.floor(gwdshare.XY.loadedY);
            var isButtonType = buttontype > 0 ? 1 : 0;
            var elementXInt = Math.floor(targerElement.x);
            var elementYInt = Math.floor(targerElement.y);
            var horizontalInt = Math.floor(horizontal);
            var verticalInt = Math.floor(vertical);
            var elementOffsetWidthInt = Math.floor(targerElement.offsetWidth);
            var elementOffsetHeightInt = Math.floor(targerElement.offsetHeight);
            var bodyOffsetWidth = document.body.offsetWidth;
            var bodyOffsetHeight = document.body.offsetHeight;
            var screenAvailWidth = window.screen.availWidth;
            var screenAvailheight = window.screen.availHeight;
            var dateStamp = +new Date;
            dateStamp = dateStamp - shareElement.time;
            var propertyDate = [loadedXInt, loadedYInt, isButtonType, elementXInt, elementYInt, horizontalInt, verticalInt, elementOffsetWidthInt, elementOffsetHeightInt, buttontype, dateStamp, bodyOffsetWidth, bodyOffsetHeight, screenAvailWidth, screenAvailheight].join(".");
            var buttonTypeInt;
            switch (GWDShareProperty.gwdType) {
            case "button":
                buttonTypeInt = 1;
                break;
            case "slide":
                buttonTypeInt = 2;
                break;
            default:
                buttonTypeInt = 0;
                break
            }
            ;var sharePlatformName = platformNameInClassName == "mail" ? "_mail" : platformNameInClassName;
            var urlProperty = "?click=1&url=" + globalUrl + "&uid=" + currentShare.gwdUid + "&to=" + sharePlatformName + "&type=text&relateUid=" + wbUid + "&pic=" + gwdPic + "&title=" + gwdText + "&key=" + (currentShare.snsKey[platformNameInClassName] || "") + "&sign=" + currentShare.review + "&desc=" + gwdDesc + "&comment=" + gwdComment + "&searchPic=" + currentShare.searchPic + "&l=" + snString + "&linkid=" + LinkId + "&sloc=" + propertyDate + "&apiType=0&buttonType=" + buttonTypeInt + "&firstime=" + UnityFunction.getCookie("gwdshare_firstime");
            if (platformNameInClassName == "mshare") {
                var newWindowUrl = currentShare.gwdMshare + urlProperty
            } else {
                var newWindowUrl = currentShare.gwdCommit + urlProperty
            }
            ;if (platformNameInClassName != "goWebsite") {
                gwdshare.publicFunction._getSc("share");
                if (1 == miniWindow) {
                    CurrentWindow.open(newWindowUrl, "gwdShare", "toolbar=0, scrollbars=1, status=0, resizable=1, height=400, width=600")
                } else {
                    var paramentjsonstring = '{"url":"' + globalUrl + '","title":"' + gwdText + '"}';
                    if (window.GridsumWebDissector) {
                        var _getTracker = GridsumWebDissector.getTracker(currentShare.gwdUid);
                        _getTracker.track();
                        _getTracker.trackEvent("WebShare", sharePlatformName, paramentjsonstring, 1)
                    }
                    ;CurrentWindow.open(newWindowUrl)
                }
            } else {
                CurrentWindow.open(currentShare.gwdJump)
            }
        },
        _browsers: function() {
            var browsersObject = {};
            var userAgentLowerCase = navigator.userAgent.toLowerCase();
            var browserType;
            if (userAgentLowerCase.match(/msie ([\d.]+)/)) {
                browserType = userAgentLowerCase.match(/msie ([\d.]+)/);
                browsersObject.name = "IE";
                browsersObject.version = browserType[1]
            } else {
                if (userAgentLowerCase.match(/firefox\/([\d.]+)/)) {
                    browserType = userAgentLowerCase.match(/firefox\/([\d.]+)/);
                    browsersObject.name = "firefox";
                    browsersObject.version = browserType[1]
                } else {
                    if (userAgentLowerCase.match(/chrome\/([\d.]+)/)) {
                        browserType = userAgentLowerCase.match(/chrome\/([\d.]+)/);
                        browsersObject.name = "chrome";
                        browsersObject.version = browserType[1]
                    } else {
                        if (userAgentLowerCase.match(/opera.([\d.]+)/)) {
                            browserType = userAgentLowerCase.match(/opera.([\d.]+)/);
                            browsersObject.name = "opera";
                            browsersObject.version = browserType[1]
                        } else {
                            if (userAgentLowerCase.match(/safari.([\d.]+)/)) {
                                browserType = userAgentLowerCase.match(/safari.([\d.]+)/);
                                browsersObject.name = "safari";
                                browsersObject.version = browserType[1]
                            } else {
                                browsersObject.name = "未知的浏览器";
                                browsersObject.version = "未知的版本号"
                            }
                        }
                    }
                }
            }
            ;return browsersObject
        }
    };
    var LinkId = UnityFunction.generateLinkid();
    gwdshare.publicFunction = (function() {
        return {
            init: function() {
                this.setTimeoutFunctionForMoreOut = null;
                DeleyStamp = new Date().getTime() + 1000;
                this._bClassElementArray = [];
                this._tClassElementArray = [];
                this.shareCountClassElementArray = [];
                this.type = "load";
                this._getShare();
                var Environment = this;
                if (typeof gwdShareConfig != "undefined") {
                    for (var configKey in gwdShareConfig) {
                        if (configKey == "gwdPopTitle" || configKey == "gwdText" || configKey == "weiboText" || configKey == "gwdPic" || configKey == "wbUid" || configKey == "tongji" || configKey == "render" || configKey == "snsKey" || configKey == "review" || configKey == "gwdComment" || configKey == "gwdDesc" || configKey == "gwdTop" || configKey == "searchPic" || configKey == "gwdUrl" || configKey == "gwdMiniWindow") {
                            if (configKey == "snsKey") {
                                GWDShareProperty[configKey] = UnityFunction._parseJson(gwdShareConfig[configKey])
                            } else {
                                GWDShareProperty[configKey] = (configKey == "render" || configKey == "gwdPopTitle" || configKey == "gwdText" || configKey == "weiboText") ? gwdShareConfig[configKey] : encodeURIComponent(gwdShareConfig[configKey])
                            }
                        }
                    }
                }
                ;this.conf = GWDShareProperty;
                this.imgW = GWDShareProperty.gwdImgW;
                if (this.conf.render) {
                    if (this._bClassElementArray.length > 0 || this._tClassElementArray.length > 0) {
                        this._share()
                    }
                    ;if (this.conf.gwdType == "slide") {
                        this._slide()
                    }
                }
                ;this._getSc(this.type);
                var tClassArray = this._tClassElementArray;
                for (var idxOfArray = 0; idxOfArray < tClassArray.length; idxOfArray++) {
                    var links = tClassArray[idxOfArray].getElementsByTagName("a");
                    for (var linkIndex = 0; linkIndex < links.length; linkIndex++) {
                        !(links[linkIndex].getAttribute("href")) && links[linkIndex].setAttribute("href", "#")
                    }
                }
                ;gwdshare.XY = gwdshare.XY || {};

                function MouseOverFunction(event) {
                    var currentEvent = event || window.event;
                    var mousePosition = UnityFunction.getMousePos(currentEvent);
                    gwdshare.XY.loadedX = mousePosition.x;
                    gwdshare.XY.loadedY = mousePosition.y;
                    if (gwdshare.XY.loadedX > 0 && gwdshare.XY.loadedY > 0) {
                        UnityFunction.unon(document, "mousemove", MouseOverFunction)
                    }
                }
                ;UnityFunction.on(document, "mousemove", MouseOverFunction);
                for (var index = 0, lengthArray = this._tClassElementArray.length; index < lengthArray; index++) {
                    (function(i) {
                        var j = i;
                        UnityFunction.on(Environment._tClassElementArray[i], "mouseover", function(event) {
                            var currentEvent = event || window.event;
                            var targetElement = currentEvent.target || currentEvent.srcElement;
                            var position = UnityFunction.getPosition(targetElement);
                            var mousePosition = UnityFunction.getMousePos(currentEvent);
                            var horizontal = mousePosition.x - position.l;
                            var vertical = mousePosition.y - position.t;
                            targetElement.buttontype = 0;
                            targetElement.x = horizontal;
                            targetElement.y = vertical;
                            var elementRalated = currentEvent.relatedTarget || currentEvent.fromElement;
                            if (UnityFunction.contains(Environment._tClassElementArray[j], elementRalated)) {
                                return
                            }
                            ;Environment._tClassElementArray[j].time = +new Date
                        })
                    }
                    )(index)
                }
                ;AddHideDiv();
                if (UnityFunction.getCookie("gwdshare_firstime") == null) {
                    UnityFunction.setCookie("gwdshare_firstime", new Date() * 1, {
                        path: "/",
                        expires: new Date().setFullYear(2022) - new Date()
                    })
                }
            },
            load: function() {
                var con2 = HtmlDocument.getElementById("gwdShare_con_2")
                  , win2 = HtmlDocument.getElementById("gwdShare_win_2");
                if (win2 && con2) {
                    this._showMouseElementLeftBottom(win2, con2, false)
                }
                ;var con2new = HtmlDocument.getElementById("gwdShare_con_2_new")
                  , win2new = HtmlDocument.getElementById("gwdShare_win_2_new");
                if (win2new && con2new) {
                    this._showIndependentAuto(win2new, con2new, false)
                }
                ;var con3 = HtmlDocument.getElementById("gwdShare_con_3")
                  , win3 = HtmlDocument.getElementById("gwdShare_win_3");
                if (win3 && con3) {
                    this._showMouseElementLeftBottom(win3, con3, false)
                }
                ;var con3ff = HtmlDocument.getElementById("gwdShare_con_3_24")
                  , win3ff = HtmlDocument.getElementById("gwdShare_win_3_24");
                if (win3ff && con3ff) {
                    this._showMouseElementRightBottom(win3ff, con3ff)
                }
                ;var con3ni = HtmlDocument.getElementById("gwdShare_con_3_noimage")
                  , win3ni = HtmlDocument.getElementById("gwdShare_win_3_noimage");
                if (win3ni && con3ni) {
                    this._showMouseElementLeftBottom(win3ni, con3ni, false)
                }
                ;var con4 = HtmlDocument.getElementById("gwdShare_con_4")
                  , win4 = HtmlDocument.getElementById("gwdShare_win_4");
                if (win4 && con4) {
                    this._showMouseElementLeftBottom(win4, con4, true)
                }
            },
            _getSc: function(D) {
                this.type = D;
                var sharecountElementArray = HtmlDocument.querySelectorAll ? HtmlDocument.querySelectorAll(".shareCount") : HtmlDocument.getElementsByTagName("*")
                  , sharecountElementCount = sharecountElementArray.length;
                while (sharecountElementCount--) {
                    if (/\sshareCount|shareCount\s|shareCount$/.test(sharecountElementArray[sharecountElementCount].className)) {
                        this.shareCountClassElementArray.push(sharecountElementArray[sharecountElementCount])
                    }
                }
                ;if (this.shareCountClassElementArray.length > 0) {
                    UnityFunction.callByBrowser(this.conf.gwdApi + "getnum?url=" + GlobalUrl + "&callback=gwdshare.fn._getShare&type=" + D + "&t=" + new Date().getTime())
                }
            },
            _getShare: function(Data) {
                var isExistProperty = Data ? true : false
                  , shareCountElements = [];
                if (HtmlDocument.querySelectorAll) {
                    this._bClassElementArray = HtmlDocument.querySelectorAll(".gwdshare_b");
                    this._tClassElementArray = HtmlDocument.querySelectorAll(".gwdshare_t")
                } else {
                    var elementArray = HtmlDocument.getElementsByTagName("*")
                      , elementCount = elementArray.length;
                    while (elementCount--) {
                        var lastObject = elementArray[elementCount];
                        if (/\sgwdshare_t|gwdshare_t\s/.test(lastObject.className)) {
                            this._tClassElementArray.push(lastObject)
                        }
                        ;if (/\sgwdshare_b|gwdshare_b\s|gwdshare_b$/.test(lastObject.className)) {
                            this._bClassElementArray.push(lastObject)
                        }
                    }
                }
                ;if (isExistProperty) {
                    var shareCountElements = this.shareCountClassElementArray, sharecountElementCount = shareCountElements.length, W;
                    while (sharecountElementCount--) {
                        if (/\sshareCount|shareCount\s|shareCount$/.test(shareCountElements[sharecountElementCount].className)) {
                            W = this.type == "share" ? (Data.num[0] < 10000 ? parseInt(shareCountElements[sharecountElementCount].innerHTML) + 1 : Data.num[1]) : (Data.errno * 1 == 0 ? Data.num[1] : 0);
                            shareCountElements[sharecountElementCount].innerHTML = decodeURI(W);
                            shareCountElements[sharecountElementCount].setAttribute("title", "累计分享" + Data.num[0] + "次");
                            shareCountElements[sharecountElementCount].onclick = function() {
                                popShareWindow.create()
                            }
                        }
                    }
                    ;this.shareCountClassElementArray = []
                }
            },
            _share: function() {
                var gwdshare_s = HtmlDocument.getElementById("gwdshare_s");
                if (gwdshare_s == null || gwdshare_s == undefined)
                    UnityFunction.list_s(true);
                var bElements = this._bClassElementArray
                  , tElements = this._tClassElementArray
                  , bElementCount = bElements.length
                  , tElementCount = tElements.length
                  , gwdsIdsl = HtmlDocument.getElementById(this.conf.gwdIdsl)
                  , gwdsiframe = HtmlDocument.getElementById("gwdsIfr")
                  , gwdList = this.conf.gwdList
                  , gwdlistCount = gwdList.length;
                UnityFunction.setAttr(gwdsIdsl, "display:none;");
                shareAction.bind(gwdsIdsl, "mouseover", "a");
                if (bElementCount > 0) {
                    while (bElementCount--) {
                        if (bElements[bElementCount].id == "gwdshare") {
                            shareAction.bind(bElements[bElementCount], "click", "img", function() {
                                popShareWindow.create()
                            });
                            shareAction.bind(bElements[bElementCount], "mouseover", "a", function() {
                                popShareWindow.create()
                            });
                            this._setStyle(bElements[bElementCount], gwdsIdsl, gwdsiframe, bElements[bElementCount], "b")
                        }
                    }
                }
                ;if (tElementCount > 0) {
                    while (tElementCount--) {
                        if (tElements[tElementCount].id == "gwdshare") {
                            shareAction.bind(tElements[tElementCount], "click", "span", function() {
                                popShareWindow.create()
                            });
                            shareAction.bind(tElements[tElementCount], "mouseover", "a");
                            var childElements = UnityFunction.children(tElements[tElementCount])
                              , childrenCount = childElements.length
                              , theChild = "";
                            while (childrenCount--) {
                                var lastChild = childElements[childrenCount];
                                if (/gwds_more/.test(lastChild.className)) {
                                    theChild = childElements[childrenCount];
                                    if (isCSS1) {
                                        theChild.style.height = (/gwds_tools_32/.test(tElements[tElementCount].className) ? 38 : 17) + "px"
                                    }
                                    ;this._setStyle(theChild, gwdsIdsl, gwdsiframe, tElements[tElementCount], theChild)
                                } else {
                                    for (var gwdIndexOfList = 0; gwdIndexOfList < gwdlistCount; gwdIndexOfList++) {
                                        if (gwdList[gwdIndexOfList]) {
                                            var stringArray = gwdList[gwdIndexOfList].split(",")
                                              , gwdimgString = new RegExp(this.conf.gwdPref + stringArray[0] + "$","ig");
                                            if (gwdimgString.test(lastChild.className)) {
                                                if (stringArray[1] == "鎷疯礉") {
                                                    lastChild.title = "澶嶅埗缃戝潃"
                                                } else {
                                                    if (!lastChild.title) {
                                                        lastChild.title = stringArray[1];
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            _setStyle: function(element, idslElement, theIframe, lastTElement, lastChild) {
                var THIS = this
                  , position = []
                  , displayValue = (lastChild ? "block" : "none");
                this._popShow(element, {
                    over: function(currentEvent) {
                        position = UnityFunction.getPosition(element);
                        if (lastTElement)
                            shareData = (lastTElement.getAttribute("data") && lastTElement.getAttribute("data") != "") ? UnityFunction._parseJson(lastTElement.getAttribute("data")) : "";
                        UnityFunction.setAttr(idslElement, "display:" + displayValue);
                        UnityFunction.setAttr(idslElement, "left:" + (((UnityFunction.getSize().w - currentEvent.clientX) < idslElement.offsetWidth) ? (position.l - idslElement.offsetWidth + element.offsetWidth) : position.l) + "px");
                        UnityFunction.setAttr(idslElement, "top:" + (((UnityFunction.getSize().h - currentEvent.clientY) < idslElement.offsetHeight) ? (position.t - idslElement.offsetHeight) : position.t + element.offsetHeight) + "px");
                        if (theIframe)
                            UnityFunction.setAttr(theIframe, "display:" + displayValue + ";width:" + idslElement.offsetWidth + "px;height:" + idslElement.offsetHeight + "px;left:" + idslElement.style.left + ";top:" + idslElement.style.top);
                        if (THIS.setTimeoutFunctionForMoreOut != null) {
                            clearTimeout(THIS.setTimeoutFunctionForMoreOut)
                        }
                    },
                    out: function() {
                        THIS.setTimeoutFunctionForMoreOut = setTimeout(function() {
                            idslElement.style.display = "none"
                        }, 100);
                        THIS._popShow(idslElement, {
                            over: function() {
                                clearTimeout(THIS.setTimeoutFunctionForMoreOut);
                                idslElement.style.display = "block";
                                if (theIframe)
                                    theIframe.style.display = "block"
                            },
                            out: function() {
                                idslElement.style.display = "none";
                                if (theIframe)
                                    theIframe.style.display = "none"
                            }
                        })
                    }
                })
            },
            _slide: function() {
                if (!CurrentWindow._gwds) {
                    var gwdLeft = this.conf.gwdLeft == "right" ? "left" : "right"
                      , gwdHost = this.conf.gwdHost + "images/" + this.conf.gwdLeft.substring(0, 1) + this.conf.gwdImg + ".gif";
                    CurrentWindow._gwds = UnityFunction.html({
                        id: this.conf.gwdIds,
                        innerHTML: '<img src="' + gwdHost + '" alt="" style="float:' + gwdLeft + ';margin-top:58px;"/>' + UnityFunction.list_s(false)
                    });
                    var _gwdsChildren = UnityFunction.children(_gwds);
                    var _gwdsLastChild = _gwdsChildren[_gwdsChildren.length - 1];
                    UnityFunction.on(_gwdsLastChild, "mouseover", function(event) {
                        var currentEvent = event || window.event;
                        var targetElement = currentEvent.target || currentEvent.srcElement;
                        var position = UnityFunction.getPosition(targetElement);
                        var relatedElement = currentEvent.relatedTarget || currentEvent.fromElement;
                        var mousePosition = UnityFunction.getMousePos(currentEvent);
                        var horizontal = mousePosition.x - position.l;
                        var vertical = mousePosition.y - position.t;
                        targetElement.buttontype = 1;
                        targetElement.x = horizontal;
                        targetElement.y = vertical;
                        if (UnityFunction.contains(_gwdsLastChild, relatedElement)) {
                            return
                        }
                        ;_gwdsLastChild.time = +new Date
                    })
                }
                ;var THIS = this
                  , currentGWDs = _gwds
                  , windowSize = UnityFunction.getSize()
                  , gwdIdslElement = HtmlDocument.getElementById(this.conf.gwdIdsl)
                  , gwdsIframe = HtmlDocument.getElementById("gwdsIfr")
                  , positionValue = (!isIE6 && !isCSS1) ? "fixed" : "absolute"
                  , topValue = (isIE6 ? windowSize.t : 0) + (this.conf.gwdTop == 0 ? (windowSize.h < gwdIdslElement.offsetHeight ? -40 : (windowSize.h / 2 - gwdIdslElement.offsetHeight / 2)) : parseInt(this.conf.gwdTop));
                UnityFunction.setAttr(currentGWDs, "overflow:hidden;height:330px;position:" + positionValue + ";top:" + topValue + "px;" + this.conf.gwdLeft + ":0;" + ((gwdLeft == "right") ? gwdLeft + ":" + (windowSize.w - this.imgW) + "px" : ""));
                UnityFunction.setAttr(gwdIdslElement, gwdLeft + ":" + this.imgW + "px;display:none");
                shareAction.bind(currentGWDs, "click", "img", function() {
                    AddHideDiv(3072);
                    popShareWindow.create()
                });
                shareAction.bind(currentGWDs, "mouseover", "img", AddStyle);
                shareAction.bind(gwdIdslElement, "mouseover", "a");

                function AddStyle() {
                    UnityFunction.setAttr(gwdIdslElement, "display:block;");
                    if ((gwdIdslElement.offsetWidth + THIS.imgW) == currentGWDs.offsetWidth) {
                        return
                    }
                    ;tm = setTimeout(function() {
                        if ((gwdIdslElement.offsetWidth + THIS.imgW) != currentGWDs.offsetWidth) {
                            THIS._move(currentGWDs, 0, THIS.imgW, gwdIdslElement.offsetWidth, gwdsIframe)
                        }
                    }, 100);
                    THIS._popShow(gwdIdslElement, {
                        over: function() {
                            UnityFunction.setAttr(gwdsIframe, "height:" + gwdIdslElement.offsetHeight + "px;" + THIS.conf.gwdLeft + ":0;top:0;display:block")
                        },
                        out: function() {}
                    });
                    THIS._popShow(currentGWDs, {
                        over: function() {},
                        out: function() {
                            if (currentGWDs.offsetWidth == (gwdIdslElement.offsetWidth + THIS.imgW)) {
                                clearTimeout(tm);
                                THIS._move(currentGWDs, 0, gwdIdslElement.offsetWidth + THIS.imgW, -gwdIdslElement.offsetWidth, gwdsIframe)
                            }
                            ;gwdsIframe.style.display = "none"
                        }
                    })
                }
                ;UnityFunction.scroll(currentGWDs, "slide");
                UnityFunction.on(CurrentWindow, "resize", function() {
                    UnityFunction.setAttr(currentGWDs, ((gwdLeft == "right") ? gwdLeft + ":" + (UnityFunction.getSize().w - THIS.imgW) + "px" : ""))
                })
            },
            _move: function(divElements, intTimes, minWidth, offsetWidth, iframeElement) {
                var divStyle = divElements.style
                  , iframeStyle = iframeElement.style
                  , THIS = this
                  , executeTimes = 6;
                setInterval(function() {
                    if (intTimes < executeTimes) {
                        intTimes++;
                        divStyle.width = Math.ceil(offsetWidth * intTimes / executeTimes + minWidth) + "px";
                        iframeStyle.width = Math.ceil(offsetWidth * intTimes / executeTimes + minWidth) - THIS.imgW + "px"
                    } else {
                        return
                    }
                }, 10)
            },
            _showMouseElementLeftBottom: function(win2, con2, isUpDown) {
                var THIS = this, position = [], setTimeoutFunction;
                this._popShow(win2, {
                    over: function() {
                        position = UnityFunction.getPosition(win2);
                        UnityFunction.setAttr(con2, "display:block");
                        UnityFunction.setAttr(con2, "left:" + win2.offsetLeft + "px");
                        UnityFunction.setAttr(con2, "top:" + (win2.offsetTop + win2.offsetHeight) + "px");
                        if (isUpDown) {
                            UnityFunction.setAttr(con2, "top:" + win2.offsetTop + "px");
                            var gda = document.getElementById("gwdShareUpDown_div");
                            if (gda)
                                gda.className = "gwdShareDown"
                        }
                    },
                    out: function() {
                        if (isUpDown) {
                            var gda = document.getElementById("gwdShareUpDown_div");
                            if (gda)
                                gda.className = "gwdShareArrow"
                        }
                        ;setTimeoutFunction = setTimeout(function() {
                            con2.style.display = "none"
                        }, 100);
                        var moreDiv = HtmlDocument.getElementById("gwdshare_l");
                        if (moreDiv)
                            THIS._popShow(moreDiv, {
                                over: function() {
                                    clearTimeout(THIS.setTimeoutFunctionForMoreOut);
                                    clearTimeout(setTimeoutFunction);
                                    moreDiv.style.display = "block";
                                    con2.style.display = "block"
                                },
                                out: function() {
                                    moreDiv.style.display = "none";
                                    THIS.setTimeoutFunctionForMoreOut = setTimeout(function() {
                                        con2.style.display = "none"
                                    }, 100);
                                    THIS._popShow(con2, {
                                        over: function() {
                                            clearTimeout(THIS.setTimeoutFunctionForMoreOut);
                                            con2.style.display = "block"
                                        },
                                        out: function() {
                                            con2.style.display = "none"
                                        }
                                    })
                                }
                            })
                    }
                })
            },
            _showMouseElementRightBottom: function(win2, con2) {
                var THIS = this, position = [], setTimeoutFunction;
                this._popShow(win2, {
                    over: function() {
                        position = UnityFunction.getPosition(win2);
                        UnityFunction.setAttr(con2, "display:block");
                        UnityFunction.setAttr(con2, "left:" + (win2.offsetLeft - con2.offsetWidth + win2.offsetWidth) + "px");
                        UnityFunction.setAttr(con2, "top:" + (win2.offsetTop + win2.offsetHeight) + "px")
                    },
                    out: function() {
                        setTimeoutFunction = setTimeout(function() {
                            con2.style.display = "none"
                        }, 100);
                        var moreDiv = HtmlDocument.getElementById("gwdshare_l");
                        if (moreDiv)
                            THIS._popShow(moreDiv, {
                                over: function() {
                                    clearTimeout(THIS.setTimeoutFunctionForMoreOut);
                                    clearTimeout(setTimeoutFunction);
                                    moreDiv.style.display = "block";
                                    con2.style.display = "block"
                                },
                                out: function() {
                                    moreDiv.style.display = "none";
                                    THIS.setTimeoutFunctionForMoreOut = setTimeout(function() {
                                        con2.style.display = "none"
                                    }, 100);
                                    THIS._popShow(con2, {
                                        over: function() {
                                            clearTimeout(THIS.setTimeoutFunctionForMoreOut);
                                            con2.style.display = "block"
                                        },
                                        out: function() {
                                            con2.style.display = "none"
                                        }
                                    })
                                }
                            })
                    }
                })
            },
            _showMouseElementAuto: function(win2, con2, isUpDown) {
                var THIS = this, position = [], setTimeoutFunction;
                this._popShow(win2, {
                    over: function(currentEvent) {
                        position = UnityFunction.getPosition(win2);
                        UnityFunction.setAttr(con2, "display:block");
                        UnityFunction.setAttr(con2, "left:" + (((UnityFunction.getSize().w - currentEvent.clientX) < con2.offsetWidth) ? (position.l - con2.offsetWidth + win2.offsetWidth) : position.l) + "px");
                        UnityFunction.setAttr(con2, "top:" + (((UnityFunction.getSize().h - currentEvent.clientY) < con2.offsetHeight) ? (position.t - con2.offsetHeight) : position.t + win2.offsetHeight) + "px");
                        if (isUpDown) {
                            UnityFunction.setAttr(con2, "top:" + win2.offsetTop + "px");
                            var gda = document.getElementById("gwdShareUpDown_div");
                            if (gda)
                                gda.className = "gwdShareDown"
                        }
                    },
                    out: function() {
                        if (isUpDown) {
                            var gda = document.getElementById("gwdShareUpDown_div");
                            if (gda)
                                gda.className = "gwdShareArrow"
                        }
                        ;setTimeoutFunction = setTimeout(function() {
                            con2.style.display = "none"
                        }, 100);
                        var moreDiv = HtmlDocument.getElementById("gwdshare_l");
                        if (moreDiv)
                            THIS._popShow(moreDiv, {
                                over: function() {
                                    clearTimeout(this.setTimeoutFunctionForMoreOut);
                                    clearTimeout(setTimeoutFunction);
                                    moreDiv.style.display = "block";
                                    con2.style.display = "block"
                                },
                                out: function() {
                                    moreDiv.style.display = "none";
                                    THIS.setTimeoutFunctionForMoreOut = setTimeout(function() {
                                        con2.style.display = "none"
                                    }, 100);
                                    THIS._popShow(con2, {
                                        over: function() {
                                            clearTimeout(THIS.setTimeoutFunctionForMoreOut);
                                            con2.style.display = "block"
                                        },
                                        out: function() {
                                            con2.style.display = "none"
                                        }
                                    })
                                }
                            })
                    }
                })
            },
            _showIndependentAuto: function(win2, con2) {
                var THIS = this, position = [], setTimeoutFunction;
                var con2Out = function() {
                    setTimeoutFunction = setTimeout(function() {
                        con2.style.display = "none"
                    }, 100);
                    THIS._popShow(con2, {
                        over: function() {
                            clearTimeout(setTimeoutFunction);
                            con2.style.display = "block"
                        },
                        out: function() {
                            setTimeoutFunction = setTimeout(function() {
                                con2.style.display = "none"
                            }, 100);
                            var moreDiv = HtmlDocument.getElementById("gwdshare_l");
                            if (moreDiv)
                                THIS._popShow(moreDiv, {
                                    over: function() {
                                        clearTimeout(this.setTimeoutFunctionForMoreOut);
                                        clearTimeout(setTimeoutFunction);
                                        moreDiv.style.display = "block";
                                        con2.style.display = "block"
                                    },
                                    out: function() {
                                        moreDiv.style.display = "none";
                                        this.setTimeoutFunctionForMoreOut = setTimeout(function() {
                                            con2.style.display = "none"
                                        }, 100);
                                    }
                                })
                        }
                    })
                };
                this._popShow(win2, {
                    over: function(currentEvent) {
                        position = UnityFunction.getPosition(win2);
                        UnityFunction.setAttr(con2, "display:block");
                        UnityFunction.setAttr(con2, "left:" + (((UnityFunction.getSize().w - currentEvent.clientX) < con2.offsetWidth) ? (position.l - con2.offsetWidth + win2.offsetWidth) : position.l) + "px");
                        UnityFunction.setAttr(con2, "top:" + (((UnityFunction.getSize().h - currentEvent.clientY) < con2.offsetHeight) ? (position.t - con2.offsetHeight) : position.t + win2.offsetHeight) + "px")
                    },
                    out: function() {
                        con2Out()
                    }
                })
            },
            _popShow: function(element, functions) {
                if (HtmlDocument.all) {
                    element.onmouseenter = function(event) {
                        overfunction(CurrentWindow.event)
                    }
                    ;
                    element.onmouseleave = outfunction
                } else {
                    element.onmouseover = function(event) {
                        event.relatedTarget == null ? overfunction(event) : (!(this === event.relatedTarget || this.compareDocumentPosition(event.relatedTarget) == 20) && overfunction(event))
                    }
                    ;
                    element.onmouseout = function(event) {
                        event.relatedTarget == null ? outfunction(event) : (!(this === event.relatedTarget || this.compareDocumentPosition(event.relatedTarget) == 20) && outfunction(event))
                    }
                }
                ;
                function overfunction(functionName) {
                    functions.over(functionName)
                }
                ;
                function outfunction(functionName) {
                    functions.out(functionName)
                }
            }
        }
    }
    )();
    if (UnityFunction.isPageMatch(pageBlacklist, location.pathname) == false) {
        AddCSSAndIframeElement();
        gwdshare.publicFunction.init();
        gwdshare.publicFunction.load()
    }
}
)();
